// app.js

var cfenv = require( 'cfenv' );
var express = require( 'express' );
var bodyParser = require( 'body-parser' );
var app = express();

var settings = require( './settings' );
var appEnv = cfenv.getAppEnv();

app.use( express.static( __dirname + '/public' ) );
//app.use( bodyParser.urlencoded( { extended: true, limit: '10mb' } ) );
app.use( bodyParser.urlencoded() );
app.use( bodyParser.json() );


//. Cloudant or CouchDB(Cloudant Local は CouchDB とみなす)
var isCloudant = ( settings.db_host ? false : true );
//console.log( 'isCloudant = ' + isCloudant );

var dblib = ( isCloudant ? require( '@cloudant/cloudant' ) : require( 'node-couchdb' ) );
var db = null;
if( isCloudant ){
  var cloudant = null;
  if( settings.db_username && settings.db_password ){
    var params = { account: settings.db_username, password: settings.db_password };
    if( settings.db_hostname ){
      var protocol = settings.db_protocol ? settings.db_protocol : 'http';
      var url = protocol + '://' + settings.db_username + ":" + settings.db_password + "@" + settings.db_hostname;
      if( settings.db_port ){
        url += ( ":" + settings.db_port );
      }
      params = { url: url };
    }
    cloudant = dblib( params );

    if( cloudant ){
      cloudant.db.get( settings.db_name, function( err, body ){
        if( err ){
          if( err.statusCode == 404 ){
            cloudant.db.create( settings.db_name, function( err, body ){
              if( err ){
                //. 'Error: server_admin access is required for this request' for Cloudant Local
                //. 'Error: insernal_server_error'
                db = null;
              }else{
                db = cloudant.db.use( settings.db_name );
                //. デザインドキュメント作成
                createDesignDocument();
              }
            });
          }else{
            db = null;
          }
        }else{
          db = cloudant.db.use( settings.db_name );
          db.get( "_design/library", {}, function( err, body ){
            if( err ){
              //. デザインドキュメント作成
              createDesignDocument();
            }else{
            }
          });
        }
      });
    }
  }
}else{
  //. npm : https://www.npmjs.com/package/node-couchdb
  db = new dblib(
    /*
    {
      auth: { user: settings.db_username, pass: settings.db_password },
      host: settings.db_host,
      protocol: settings.db_protocol,
      port: settings.db_port
    }
    */
  );

  if( db ){
    db.listDatabases().then( function( dbs ){
      var b = false;
      dbs.forEach( function( db ){
        if( db == settings.db_name ){
          b = true;
        }
      });

      if( !b ){
        db.createDatabase( settings.db_name ).then( function(){
          createDesignDocument();
        }).catch( function( err ){
        });
      }
    }).catch( function( err ){
    });
  }
}


app.post( '/doc', function( req, res ){
  res.contentType( 'application/json; charset=utf-8' );
  console.log( 'POST /doc' );

  var doc = req.body;
  doc.timestamp = ( new Date() ).getTime();
  //console.log( doc );

  if( db ){
    if( isCloudant ){
      db.insert( doc, function( err, body ){ //. insert
        if( err ){
          console.log( err ); //. err : Invalid attachment stub in XXXXXX
          res.status( 400 );
          res.write( JSON.stringify( { status: false, message: err }, 2, null ) );
          res.end();
        }else{
          console.log( body );
          res.write( JSON.stringify( { status: true, body: body }, 2, null ) );
          res.end();
        }
      });
    }else{
      db.uniqid().then( function( id ){
        doc._id = id[0];

        db.insert( settings.db_name, doc ).then( function( body, headers, status ){
          console.log( body );
          res.write( JSON.stringify( { status: true, body: body }, 2, null ) );
          res.end();
        }).catch( function( err ){
          console.log( err );
          res.status( 400 );
          res.write( JSON.stringify( { status: false, message: err }, 2, null ) );
          res.end();
        });
      });
    }
  }else{
    res.status( 400 );
    res.write( JSON.stringify( { status: false, message: 'db is failed to initialize.' }, 2, null ) );
    res.end();
  }
});

app.get( '/doc/:id', function( req, res ){
  res.contentType( 'application/json; charset=utf-8' );
  var id = req.params.id;
  console.log( 'GET /doc/' + id );

  if( db ){
    if( isCloudant ){
      db.get( id, { include_docs: true }, function( err, body ){
        if( err ){
          res.status( 400 );
          res.write( JSON.stringify( { status: false, message: err }, 2, null ) );
          res.end();
        }else{
          res.write( JSON.stringify( { status: true, doc: body }, 2, null ) );
          res.end();
        }
      });
    }else{
      db.get( settings.db_name, id ).then( function( body, headers, status ){
        console.log( body );
        res.write( JSON.stringify( { status: true, doc: body }, 2, null ) );
        res.end();
      }).catch( function( err ){
        console.log( err );
        res.status( 400 );
        res.write( JSON.stringify( { status: false, message: err }, 2, null ) );
        res.end();
      });
    }
  }else{
    res.status( 400 );
    res.write( JSON.stringify( { status: false, message: 'db is failed to initialize.' }, 2, null ) );
    res.end();
  }
});

app.get( '/doc/:id/attachment', function( req, res ){
  res.contentType( 'application/json; charset=utf-8' );
  var id = req.params.id;
  console.log( 'GET /doc/' + id + '/attachment' );

  if( db ){
    if( isCloudant ){
      db.get( id, { include_docs: true }, function( err, body ){
        if( err ){
          res.status( 400 );
          res.write( JSON.stringify( { status: false, message: err }, 2, null ) );
          res.end();
        }else{
          //. body._attachments.(attachname) : { content_type: '', data: '' }
          if( body._attachments ){
            for( key in body._attachments ){
              var attachment = body._attachments[key];
              if( attachment.content_type ){
                res.contentType( attachment.content_type );
              }

              //. 添付画像バイナリを取得する
              db.attachment.get( id, key, function( err, buf ){
                if( err ){
                  res.contentType( 'application/json; charset=utf-8' );
                  res.status( 400 );
                  res.write( JSON.stringify( { status: false, message: err }, 2, null ) );
                  res.end();
                }else{
                  res.end( buf, 'binary' );
                }
              });
            }
          }else{
            res.status( 400 );
            res.write( JSON.stringify( { status: false, message: 'No attachment found.' }, 2, null ) );
            res.end();
          }
        }
      });
    }else{
      db.get( id, { include_docs: true }, function( err, body ){
        if( err ){
          res.status( 400 );
          res.write( JSON.stringify( { status: false, message: err }, 2, null ) );
          res.end();
        }else{
          //. body._attachments.(attachname) : { content_type: '', data: '' }
          if( body._attachments ){
            for( key in body._attachments ){
              var attachment = body._attachments[key];
              if( attachment.content_type ){
                res.contentType( attachment.content_type );
              }

              //. 添付画像バイナリを取得する
              db.attachment.get( id, key, function( err, buf ){
                if( err ){
                  res.contentType( 'application/json; charset=utf-8' );
                  res.status( 400 );
                  res.write( JSON.stringify( { status: false, message: err }, 2, null ) );
                  res.end();
                }else{
                  res.end( buf, 'binary' );
                }
              });
            }
          }else{
            res.status( 400 );
            res.write( JSON.stringify( { status: false, message: 'No attachment found.' }, 2, null ) );
            res.end();
          }
        }
      });
    }
  }else{
    res.status( 400 );
    res.write( JSON.stringify( { status: false, message: 'db is failed to initialize.' }, 2, null ) );
    res.end();
  }
});

app.get( '/docs', function( req, res ){
  res.contentType( 'application/json; charset=utf-8' );
  console.log( 'GET /docs' );

  if( db ){
    if( isCloudant ){
      db.list( { include_docs: true }, function( err, body ){
        if( err ){
          res.status( 400 );
          res.write( JSON.stringify( { status: false, message: err }, 2, null ) );
          res.end();
        }else{
          var docs = [];
          body.rows.forEach( function( doc ){
            var _doc = JSON.parse(JSON.stringify(doc.doc));
            if( _doc._id.indexOf( '_' ) !== 0 ){
              docs.push( _doc );
            }
          });

          var result = { status: true, docs: docs };
          res.write( JSON.stringify( result, 2, null ) );
          res.end();
        }
      });
    }else{
      db.get( settings.db_name, '_design/library/_view/bytimestamp', {} ).then( function( data, headers, status ){
        //console.log( data );
        if( data && data.data ){
          var body = data.data.rows;
          res.write( JSON.stringify( { status: true, docs: body }, 2, null ) );
          res.end();
        }else{
          res.status( 400 );
          res.write( JSON.stringify( { status: false, message: 'failed to get documents.' }, 2, null ) );
          res.end();
        }
      }).catch( function( err ){
        console.log( err );
        res.status( 400 );
        res.write( JSON.stringify( { status: false, message: err }, 2, null ) );
        res.end();
      });
    }
  }else{
    res.status( 400 );
    res.write( JSON.stringify( { status: false, message: 'db is failed to initialize.' }, 2, null ) );
    res.end();
  }
});

app.delete( '/doc/:id', function( req, res ){
  res.contentType( 'application/json; charset=utf-8' );
  var id = req.params.id;
  console.log( 'DELETE /doc/' + id );

  if( db ){
    if( isCloudant ){
      db.get( id, function( err, data ){
        if( err ){
          res.status( 400 );
          res.write( JSON.stringify( { status: false, message: err }, 2, null ) );
          res.end();
        }else{
          db.destroy( id, data.data._rev, function( err, body ){
            if( err ){
              res.status( 400 );
              res.write( JSON.stringify( { status: false, message: err }, 2, null ) );
              res.end();
            }else{
              res.write( JSON.stringify( { status: true }, 2, null ) );
              res.end();
            }
          });
        }
      });
    }else{
      db.get( settings.db_name, id ).then( function( doc, headers, status ){
        console.log( doc );

        db.del( settings.db_name, id, doc._rev ).then( function( data, headers, status ){
          console.log( data );
          res.write( JSON.stringify( { status: true, doc: data }, 2, null ) );
          res.end();
        }).catch( function( err ){
          console.log( err );
          res.status( 400 );
          res.write( JSON.stringify( { status: false, message: err }, 2, null ) );
          res.end();
        });
      }).catch( function( err ){
        console.log( err );
        res.status( 400 );
        res.write( JSON.stringify( { status: false, message: err }, 2, null ) );
        res.end();
      });
    }
  }else{
    res.status( 400 );
    res.write( JSON.stringify( { status: false, message: 'db is failed to initialize.' }, 2, null ) );
    res.end();
  }
});


/*
 You need to create search index 'design/search' with name 'newSearch' in your Cloudant DB before executing this API.
 */
app.get( '/search', function( req, res ){
  res.contentType( 'application/json; charset=utf-8' );
  console.log( 'GET /search' );
  if( db ){
    if( isCloudant ){
      var q = req.query.q;
      if( q ){
        db.search( 'library', 'newSearch', { q: q }, function( err, body ){
          if( err ){
            res.status( 400 );
            res.write( JSON.stringify( { status: false, message: err }, 2, null ) );
            res.end();
          }else{
            res.write( JSON.stringify( { status: true, result: body }, 2, null ) );
            res.end();
          }
        });
      }else{
        res.status( 400 );
        res.write( JSON.stringify( { status: false, message: 'parameter: q is required.' }, 2, null ) );
        res.end();
      }
    }else{
      //. Apache CouchDB で search
      res.status( 400 );
      res.write( JSON.stringify( { status: false, message: 'Not implemented yet.' }, 2, null ) );
      res.end();
    }
  }else{
    res.status( 400 );
    res.write( JSON.stringify( { status: false, message: 'db is failed to initialize.' }, 2, null ) );
    res.end();
  }
});


app.post( '/reset', function( req, res ){
  res.contentType( 'application/json; charset=utf-8' );
  console.log( 'POST /reset' );

  if( db ){
    if( isCloudant ){
      db.list( {}, function( err, body ){
        if( err ){
          res.status( 400 );
          res.write( JSON.stringify( { status: false, message: err }, 2, null ) );
          res.end();
        }else{
          var docs = [];
          body.rows.forEach( function( doc ){
            var _id = doc.id;
            if( _id.indexOf( '_' ) !== 0 ){
              var _rev = doc.value.rev;
              docs.push( { _id: _id, _rev: _rev, _deleted: true } );
            }
          });
          if( docs.length > 0 ){
            db.bulk( { docs: docs }, function( err ){
              res.write( JSON.stringify( { status: true, message: docs.length + ' documents are deleted.' }, 2, null ) );
              res.end();
            });
          }else{
            res.write( JSON.stringify( { status: true, message: 'No documents need to be deleted.' }, 2, null ) );
            res.end();
          }
        }
      });
    }else{
      //. Apache CouchDB で reset
      res.status( 400 );
      res.write( JSON.stringify( { status: false, message: 'Not implemented yet.' }, 2, null ) );
      res.end();
    }
  }else{
    res.status( 400 );
    res.write( JSON.stringify( { status: false, message: 'db is failed to initialize.' }, 2, null ) );
    res.end();
  }
});


function deleteTree( ddoc, prev_docs ){
  var id = ddoc.id;
  var hash = ddoc.hash;
  deleteDocument( id );
  var docs = prev_docs[hash];
  docs.forEach( function( doc ){
    deleteTree( doc );
  });
}

function deleteDocument( doc_id ){
  console.log( "deleting document: " + doc_id );
  db.get( doc_id, function( err, data ){
    if( !err ){
      db.destroy( id, data._rev, function( err, body ){
      });
    }
  });
}

function sortDocuments( _docs ){
  var docs = [];
  for( var i = 0; i < _docs.length; i ++ ){
    var _doc = _docs[i];
    if( 'timestamp' in _doc ){
      var b = false;
      for( var j = 0; j < docs.length && !b; j ++ ){
        if( docs[j].timestamp > _doc.timestamp ){
          docs.splice( j, 0, _doc );
          b = true;
        }
      }
      if( !b ){
        docs.push( _doc );
      }
    }
  }

  return docs;
}

function createDesignDocument(){
  if( db ){
    if( isCloudant ){
      var search_index_function = 'function (doc) { index( "default", doc._id ); }';
      if( settings.search_fields ){
        search_index_function = 'function (doc) { index( "default", ' + settings.search_fields + '.join( " " ) ); }';
      }

      //. デザインドキュメント作成
      var design_doc = {
        _id: "_design/library",
        language: "javascript",
        views: {
          bytimestamp: {
            map: "function (doc) { if( doc.timestamp ){ emit(doc.timestamp, doc); } }"
          }
        },
        indexes: {
          newSearch: {
            "analyzer": settings.search_analyzer,
            "index": search_index_function
          }
        }
      };
      db.insert( design_doc, function( err, body ){
        if( err ){
          console.log( "db init: err" );
          console.log( err );
        }else{
          //console.log( "db init: " );
          //console.log( body );
        }
      });
    }else{
      var search_index_function = 'function (doc) { index( "default", doc._id ); }';
      if( settings.search_fields ){
        search_index_function = 'function (doc) { index( "default", ' + settings.search_fields + '.join( " " ) ); }';
      }

      //. デザインドキュメント作成
      var design_doc = {
        _id: "_design/library",
        language: "javascript",
        views: {
          bytimestamp: {
            map: "function (doc) { if( doc.timestamp ){ emit(doc.timestamp, doc); } }"
          }
        },
        indexes: {
          newSearch: {
            "analyzer": settings.search_analyzer,
            "index": search_index_function
          }
        }
      };

      db.insert( settings.db_name, design_doc ).then( function( data, headers, status ){
        console.log( 'design document successfully created.')
        console.log( data );
      }).catch( function( err ){
        console.log( 'exception catched:' );
        console.log( err );
      });
    }
  }else{
    console.log( 'db is not initialized.' );
  }
}



var port = settings.app_port || appEnv.port || 3000;
app.listen( port );
console.log( 'server started on ' + port );
